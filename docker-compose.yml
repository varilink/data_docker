# ------------------------------------------------------------------------------
# docker-compose.yml
# ------------------------------------------------------------------------------

# Docker Compose services that combine to run and document the DATA website on
# the developer desktop. These fall into four categories:
#
#   1. "Run" the website and associated Django admin interface:
#     - web
#     - app
#     - admin
#
#   2. "Build" the website's front-end assets:
#     - gimp
#     - npm
#
#   3. "Document" the Perl web application that the website is based on:
#     - pod2markdown
#
#   4. "Integrate" the website with third-party Cloud services:
#     - contacts

---

services:

  # ------
  # 1. Run
  # ------

  web:

    build: ./web

    image: varilink/data/web

    container_name: ${DATA_WEB_HOST} # fixed for varilink/tools-proxy access

    # See the .env file for explanatory comments on all these variables.
    environment:
      - WORKER_PROCESSES
      - ERROR_LOG_LEVEL
      - DATA_WEB_HOST
      - DATA_APP_HOST
      - DATA_APP_PORT
      - DATA_ADMIN_HOST
      - DATA_ADMIN_PORT

    # The web layer passes requests through to the app and admin services and it
    # sits behind the proxy service, so it depends on all three.
    depends_on:
      - app
      - admin
      - proxy

    volumes:
      # Mount a folder containing a recent backup. This should contain the
      # upload folder, which contains images uploaded for events. The web
      # service container will copy this to the path it uses for these uploads.
      - ./backup/:/backup/:ro
      # Template file used to configure nginx - see "Using environment variables
      # in nginx configuration (new in 1.19)" in https://hub.docker.com/_/nginx.
      - ./web/templates:/etc/nginx/templates:ro
      # Static content provided by the varilink/data-web repository.
      - ./web/data-web/dist/:/usr/share/nginx/html/assets/:ro
      # See the comments associated with the django-static volume under the
      # volumes key below.
      - django-static:/usr/share/nginx/html/static/:ro

  app:

    build: ./app

    image: varilink/data/app:bookworm

    container_name: ${DATA_APP_HOST} # fixed for pass through from web layer

    command: [ "--ini" , "/etc/uwsgi/apps-enabled/data-app.ini" ]

    environment:
      - DATA_APP_PORT

    # Expose IMAP port to host for viewing emails in host's email client
    ports: ["143:143"]

    volumes:
      # Mount a folder containing a recent backup. This should contain the app's
      # SQLite database, which is derbyartsandtheatre.db. The app service
      # container will copy this to the folder that it uses for SQLite database
      # files.
      - ./backup:/backup:ro
      # See the comments associated with the database volume under the volumes
      # key below.
      - database:/database
      # UWSGI application ini files.
      - ./app/uwsgi/:/etc/uwsgi/apps-enabled:ro
      # Application configuration files
      - ./app/conf/:/usr/local/etc/
      - ./app/data-app/conf/:/usr/local/etc/app/:ro
      - ./data-int:/usr/local/etc/int/:ro
      # The application based on CGI::Application and taken from the data-app
      # repository. Putting it in /usr/local/lib/site_perl ensures that it is
      # the Perl include path.
      - ./app/data-app/pm/:/usr/local/lib/site_perl/:ro
      # Template Toolkit templates taken from the data-templates repository.
      - ./app/data-app/tt/:/usr/local/lib/tt/:ro
      # The PSGI application launch scripts.
      - ./app/data-app/psgi/:/usr/local/sbin/:ro
      # Stylesheets, images and Javascript files used by the website.
      - ./web/data-web/dist/:/usr/share/nginx/html/assets/:ro
      # The DATA batch scripts that implement the social media integrations.
      - ./app/data-app/pl/:/usr/local/src/:ro

  admin:

    build: ./admin

    image: varilink/data/admin:bookworm

    container_name: ${DATA_ADMIN_HOST} # fixed for pass through from web layer

    command: [ "--ini" , "/etc/uwsgi/apps-enabled/data-admin.ini" ]

    environment:
      - DATA_ADMIN_PORT

    volumes:
      # See the comments associated with the database volume under the volumes
      # key below.
      - database:/database
      # UWSGI application ini files.
      - ./admin/uwsgi:/etc/uwsgi/apps-enabled:ro
      # See the comments associated with the django-static volume under the
      # volumes key below.
      - django-static:/static

  # --------
  # 2. Build
  # --------

  gimp:

    working_dir: /data-gimp/
    volumes:
      - ./web/data_web/gimp/:/data-gimp/
      - ./web/data_web/media/website/:/website/
      - ./web/data_web/media/other/:/other/

  npm:

    volumes:
      - ./web/data_web:/npm

  # -----------
  # 3. Document
  # -----------

  pod2markdown:

    build: tools/pod2markdown
    image: varilink/pod2markdown
    user: "1000:1000"
    command:
      - -c
      - |-
        rm -rf /app/pod2markdown/*
        for ext in pl pm psgi
        do
          for fname in `find /app/$$ext/ -type f -name "*.$$ext"`
          do
            basename=`basename $$fname .$$ext`
            reldir=`dirname $$fname | cut -c6-`
            mkdir -p "/app/pod2markdown/$$reldir/$$basename"
            pod2markdown $$fname > "/app/pod2markdown/$$reldir/$$basename/README.md"
          done
        done
    volumes:
      - ./app/data-app:/app

  # ------------
  # 4. Integrate
  # ------------

  contacts:

    build: tools/contacts
    volumes:
      # app
      - ./tools/contacts/app.pl:/usr/local/src/app.pl
      - ./app/data_app/pm:/usr/local/lib/site_perl
      # configuration
      - ./tools/contacts/app.cfg:/app.cfg
      - ./data_int/:/int/
      # data
      - ./backup/:/database/

volumes:

  # volume for SQLite databases that is shared by the app and admin services. It
  # holds the bespoke application database as derbyartsandtheatre.db and the
  # Django database as core.db.
  database:

  # An external volume for the static content that comes with Django. The admin
  # service populates this when it installs Django. The web service can then
  # serve this static content directly by having access to the same volume.
  django-static:
